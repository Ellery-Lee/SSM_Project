<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liruicong.dao.IUserDao">
    <!-- 配置查询结果的列名和实体类的属性名的对应关系 -->
    <!-- 如果User实体类中的属性名和数据库中的字段不一样的话可以采用这种方式进行属性映射
         使用时需要把下面的resultType改成resultMap="下面配置中的id"，否则resultType会覆盖resultMap配置
         但是这样优缺点，会让Java多解析一段xml语句，所以执行效率会变慢，开发效率会变快。
         在实际开发中需要权衡利弊进行使用
    -->
    <resultMap id="userMap" type="com.liruicong.domain.User">
        <!-- 主键字段的对应 -->
        <id property="id" column="id"></id>
        <!-- 非主键字段的对应 -->
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
    </resultMap>

    <!-- 了解内容：抽取重复的SQL语句 -->
    <sql id="defaultUser">
        select * from user
    </sql>

    <!-- 查询所有 -->
    <select id="findAll" resultMap="userMap">
        <include refid="defaultUser"></include>
    </select>

    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="Integer" resultMap="userMap">
        select * from user where id = #{uid};
    </select>

    <!-- 根据名称模糊查询 -->
    <select id="findByName" parameterType="String" resultMap="userMap">
        select * from user where username like #{name};
        <!-- 下面这种方法采用的是字符串拼接，会产生sql注入，上面的方法使用的是preparedStatement，不会产生sql注入 -->
        <!-- select * from user where username like '%${value}%'; -->
    </select>

    <!-- 根据queryVo的条件查询用户 -->
    <select id="findUserByVo" parameterType="com.liruicong.domain.QueryVo" resultMap="userMap">
        select * from user where username like #{user.username};
    </select>

    <!-- 根据条件查询
    <select id="findUserByCondition" parameterType="com.liruicong.domain.User" resultMap="userMap">
        select * from user where 1=1
        <if test="username != null">
            and username = #{username}
        </if>
        <if test="sex != null">
            and sex = #{sex};
        </if>
    </select> -->
    <select id="findUserByCondition" parameterType="com.liruicong.domain.User" resultMap="userMap">
        select * from user
        <where>
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="sex != null">
                and sex = #{sex};
            </if>
        </where>
    </select>

    <!-- 根据queryVo中的Id集合实现查询用户列表 -->
    <select id="findUserInIds" parameterType="com.liruicong.domain.QueryVo" resultMap="userMap">
        <include refid="defaultUser"></include>
        <where>
            <if test="ids != null and ids.size() > 0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
</mapper>